# 1) Создать переменную типа String
# Строка представляет собой последовательность символов.
# Мы можем использовать одинарные или двойные кавычки для создания строки.
# Многострочные строки можно обозначить тройными кавычками
st = 'Nata'
print(type(st), st)

# 2) Создать переменную типа Integer
# Целые числа могут быть любой длины, они ограничиваются лишь доступной памятью.
i = 7
print(type(i), i)

# 3) Создать переменную типа Float
# Числа с плавающей запятой имеют ограниченную точность.
# Визуально разницу между целым числом и числом с плавающей запятой можно заметить по наличию точки
c = 3.7
print(type(c), c)

# 4) Создать переменную типа Bytes
#последовательность чисел в диапазоне 0-255
b = bytes([35, 100, 76, 67, 56])
print(type(b), b)

# 5) Создать переменную типа List
# Список представляет собой упорядоченную последовательность элементов.
# Он очень гибкий и является одним из самых используемых типов в Python.
# Элементы списка не обязательно должны быть одного типа.
# Объявить список довольно просто. Внутрь квадратных скобок помещаются элементы списка, разделённые запятой
l = [st, i, c]
print(type(l), l)

# 6) Создать переменную типа Tuple
# Так же как и список, кортеж (tuple) является упорядоченной последовательностью элементов.
# Вся разница заключается в том, что кортежи неизменяемы.
# Кортежи используются для защиты данных от перезаписи и обычно работают быстрее, чем списки,
# т.к. их нельзя изменять.
# Для создания кортежа нужно поместить внутрь круглых скобок элементы, разделённые запятой
t = (5, st, 3.5)
print(type(t), t)

# 7) Создать переменную типа Set
# Множество является неупорядоченной уникализированной последовательностью.
# Объявляется множество с помощью элементов, разделённых запятой, внутри фигурных скобок.
#Поскольку множество является неупорядоченной последовательностью, оператор извлечения среза здесь не работает
s = {5, st, 3.5}
print(type(s), s)

# 8) Создать переменную типа Frozen set
# Единственное отличие set от frozenset заключается в том, что set - изменяемый тип данных, а frozenset - нет.
f = frozenset({5, st, 3.5})
print(type(f), f)

# 9) Создать переменную типа Dict
# Словари — неупорядоченные наборы пар ключ-значение.
#Значение может быть любого типа, а вот ключ — только неизменяемого.
#Мы используем ключ, чтобы получить соответствующее ему значение.
# Словари оптимизированы для извлечения данных. Чтобы извлечь значение, нужно знать ключ.
# Словарь объявляется парами элементов в форме ключ:значение, заключенными в фигурные скобки
# Над множествами можно выполнять такие операции, как объединение и пересечение.
# Т.к. элементы в множестве должны быть уникальны, они автоматически удаляют дубликаты
d = {'value':1, 'key':2}
print(type(d), d)

# 10) Вывести в консоль все выше перечисленные переменные с добавлением типа данных.
print((type(st), st), (type(i), i), (type(c), c), (type(b), b), (type(l), l), (type(t), t), (type(s), s), (type(f), f), (type(d), d), sep=' & ')

# 11) Создать 2 переменные String, создать переменную в которой сканкатенируете эти переменные.
# Вывести в консоль.
st1 = 'Hello, '
st2 = 'World!'
con = st1+st2
print(con)

# 12) Вывести в одну строку переменные типа String и Integer используя “,” (Запятую)
print(st, i, sep = '_')

# 13) Вывести в одну строку переменные типа String и Integer используя “+” (Плюс)
print(st + str(i))